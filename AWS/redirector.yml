---
# AWS Redirector Deployment Playbook

- name: Deploy AWS redirector
  hosts: localhost
  gather_facts: false
  connection: local
  vars_files:
    - vars.yaml
  vars:
    # Default values
    ssh_user: "{{ ssh_user | default('ubuntu') }}"  # Changed from 'root' to 'ubuntu'
    aws_region: "{{ aws_region | default(aws_region_choices | random) }}"
    instance_type: "{{ aws_instance_type | default('t2.micro') }}"
    deployment_id: "{{ deployment_id | default('') }}"
    redirector_name: "{{ redirector_name | default('r-' + deployment_id) }}"
    # Calculate effective port: use shell_handler_port from vars or default to 8083
    effective_listen_port: "{{ shell_handler_port | default(8083) }}"
    # Check for shared infrastructure
    # Only use shared when C2 and redirector are in the same region
    use_shared_infra: "{{ not (c2_region is defined and redirector_region is defined and c2_region != redirector_region) and not c2_only | default(false) | bool and not redirector_only | default(false) | bool }}"
    # Ubuntu AMI IDs for different regions (Ubuntu 22.04 LTS)
    ubuntu_ami_map:
      us-east-1: "ami-0aa2b7722dc1b5612"
      us-east-2: "ami-06c4532923d4ba1ec"
      us-west-1: "ami-0573b70afecda915d"
      us-west-2: "ami-0c79c59ac2c572b87"
      eu-west-1: "ami-0694d931cee176e7d"
      eu-west-2: "ami-0505148b3591e4c07"
      eu-central-1: "ami-06dd92ecc74fdfb36"
      ap-southeast-1: "ami-0df7a207adb9748c7"
      ap-southeast-2: "ami-0df4b2961410d4cff"
      ap-northeast-1: "ami-0014b5f031a76c1b1"
      sa-east-1: "ami-0af6e9042ea5a4e3e"

  tasks:
    - name: Validate AWS credentials
      assert:
        that:
          - aws_access_key is defined and aws_access_key != ""
          - aws_secret_key is defined and aws_secret_key != ""
        fail_msg: "AWS credentials are required"

    # Load shared infrastructure state if available
    - name: Check for shared infrastructure state
      stat:
        path: "infrastructure_state_{{ deployment_id }}.json"
      register: infra_state_file
      when: use_shared_infra | bool
      
    - name: Load shared infrastructure state
      include_vars:
        file: "infrastructure_state_{{ deployment_id }}.json"
        name: shared_infra
      when: use_shared_infra | bool and infra_state_file.stat.exists | default(false)

    # After loading shared infrastructure state
    - name: Validate shared VPC exists
      amazon.aws.ec2_vpc_net_info:
        region: "{{ shared_infra.region }}"
        vpc_ids:
          - "{{ shared_infra.vpc_id }}"
      register: vpc_check
      when: use_shared_infra | bool and infra_state_file.stat.exists | default(false)
      ignore_errors: yes

    - name: Delete stale infrastructure state file
      file:
        path: "infrastructure_state.json"
        state: absent
      when: use_shared_infra | bool and vpc_check.vpcs is defined and vpc_check.vpcs | length == 0

    - name: Disable shared infrastructure when VPC doesn't exist
      set_fact:
        use_shared_infra: false
      when: use_shared_infra | bool and vpc_check.vpcs is defined and vpc_check.vpcs | length == 0

    - name: Set region for redirector from shared infra
      set_fact:
        aws_redirector_region: "{{ shared_infra.region | default(aws_region) }}"
      when: use_shared_infra | bool and infra_state_file.stat.exists | default(false)
        
    - name: Set default region for redirector
      set_fact:
        aws_redirector_region: "{{ redirector_region | default(aws_region) }}"
      when: not (use_shared_infra | bool and infra_state_file.stat.exists | default(false))
      
    - name: Set AMI ID for selected region
      set_fact:
        ami_id: "{{ ubuntu_ami_map[aws_redirector_region] | default(ubuntu_ami_map['us-east-1']) }}"
      
    - name: Create EC2 key pair
      amazon.aws.ec2_key:
        name: "{{ redirector_name }}"
        region: "{{ aws_redirector_region }}"
        state: present
      register: redirector_key_pair

    - name: Save private key locally
      copy:
        content: "{{ redirector_key_pair.key.private_key }}"
        dest: "~/.ssh/{{ redirector_name }}.pem"
        mode: "0600"
      when: redirector_key_pair.changed and redirector_key_pair.key.private_key is defined

    # Create new infrastructure only if not using shared
    - name: Create VPC
      amazon.aws.ec2_vpc_net:
        name: "{{ redirector_name }}-vpc"
        cidr_block: "10.0.0.0/16"
        region: "{{ aws_redirector_region }}"
        tags:
          Name: "{{ redirector_name }}-vpc"
          deployment_id: "{{ deployment_id }}"
        state: present
      register: vpc_result
      when: not (use_shared_infra | bool and infra_state_file.stat.exists | default(false))

    - name: Create internet gateway for VPC
      amazon.aws.ec2_vpc_igw:
        vpc_id: "{{ vpc_result.vpc.id }}"
        region: "{{ aws_redirector_region }}"
        state: present
        tags:
          Name: "{{ redirector_name }}-igw"
          deployment_id: "{{ deployment_id }}"
      register: igw_result
      when: not (use_shared_infra | bool and infra_state_file.stat.exists | default(false))

    - name: Create subnet in VPC
      amazon.aws.ec2_vpc_subnet:
        vpc_id: "{{ vpc_result.vpc.id }}"
        cidr: "10.0.1.0/24"
        region: "{{ aws_redirector_region }}"
        az: "{{ aws_redirector_region }}a"
        map_public: yes
        tags:
          Name: "{{ redirector_name }}-subnet"
          deployment_id: "{{ deployment_id }}"
      register: subnet_result
      when: not (use_shared_infra | bool and infra_state_file.stat.exists | default(false))

    - name: Create routing table for internet access
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc_result.vpc.id }}"
        region: "{{ aws_redirector_region }}"
        tags:
          Name: "{{ redirector_name }}-rtb"
          deployment_id: "{{ deployment_id }}"
        routes:
          - dest: "0.0.0.0/0"
            gateway_id: "{{ igw_result.gateway_id }}"
        subnets:
          - "{{ subnet_result.subnet.id }}"
      register: route_table_result
      when: not (use_shared_infra | bool and infra_state_file.stat.exists | default(false))

    # Set VPC ID based on shared or created
    - name: Set VPC ID from shared infrastructure
      set_fact:
        vpc_id: "{{ shared_infra.vpc_id }}"
        subnet_id: "{{ shared_infra.subnet_id }}"
        redirector_vpc_id: "{{ shared_infra.vpc_id }}"  # Store for cleanup reference
      when: use_shared_infra | bool and infra_state_file.stat.exists | default(false)

    - name: Set VPC ID from created infrastructure
      set_fact:
        vpc_id: "{{ vpc_result.vpc.id }}"
        subnet_id: "{{ subnet_result.subnet.id }}"
        redirector_vpc_id: "{{ vpc_result.vpc.id }}"  # Store for cleanup reference
      when: not (use_shared_infra | bool and infra_state_file.stat.exists | default(false))

    # Create security group
    - name: Create security group
      amazon.aws.ec2_security_group:
        name: "{{ redirector_name }}-sg"
        description: "Security group for redirector {{ redirector_name }}"
        vpc_id: "{{ vpc_id }}"
        region: "{{ aws_redirector_region }}"
        rules:
          - proto: tcp
            ports:
              - 22
              - 80
              - 443
              - "{{ effective_listen_port }}"
            cidr_ip: 0.0.0.0/0
        rules_egress:
          - proto: -1
            cidr_ip: 0.0.0.0/0
        state: present
      register: security_group

   # Save infrastructure state for reuse
    - name: Save infrastructure state for reuse
      copy:
        content: |
          {
            "vpc_id": "{{ vpc_id }}",
            "subnet_id": "{{ subnet_id }}",
            "security_group_id": "{{ security_group.group_id }}",
            "region": "{{ aws_redirector_region }}",
            "deployment_id": "{{ deployment_id }}"
          }
        dest: "infrastructure_state_{{ deployment_id }}.json"
      when: not (use_shared_infra | bool and infra_state_file.stat.exists | default(false))

    # Launch the redirector
    - name: Launch redirector instance
      amazon.aws.ec2_instance:
        name: "{{ redirector_name }}"
        key_name: "{{ redirector_name }}"
        instance_type: "{{ redirector_instance_type | default('t2.micro') }}"
        vpc_subnet_id: "{{ subnet_id }}"
        security_groups:
          - "{{ security_group.group_id }}"
        image_id: "{{ ami_id }}"
        region: "{{ aws_redirector_region }}"
        state: present
        wait: yes
        tags:
          Name: "{{ redirector_name }}"
          deployment_id: "{{ deployment_id }}"
      register: redirector_instance

    - name: Set redirector_ip for later use
      set_fact:
        redirector_ip: "{{ redirector_instance.instances[0].public_ip_address }}"
        redirector_instance_id: "{{ redirector_instance.instances[0].instance_id }}"

    - name: Wait for redirector SSH to be available
      wait_for:
        host: "{{ redirector_ip }}"
        port: 22
        delay: 30
        timeout: 300
        state: started

    - name: Add redirector to inventory
      add_host:
        name: "redirector"
        groups: "redirectors"
        ansible_host: "{{ redirector_ip }}"
        ansible_user: "ubuntu"  # Change this from 'root' to 'ubuntu'
        ansible_ssh_private_key_file: "~/.ssh/{{ redirector_name }}.pem"
        ansible_ssh_common_args: "-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o IdentitiesOnly=yes"
        ansible_python_interpreter: "/usr/bin/python3"
        shell_handler_port: "{{ effective_listen_port }}"

# Rest of the playbook for configuring the redirector
- name: Configure redirector
  hosts: redirectors
  become: true
  gather_facts: true
  vars_files:
    - vars.yaml
  vars:
    c2_ip: "{{ hostvars['localhost']['c2_ip'] | default('127.0.0.1') }}"
    shell_handler_port: "{{ hostvars['localhost']['effective_listen_port'] }}"
    
  # Include the rest of your redirector configuration tasks here
  tasks:    
    - name: Include common redirector configuration tasks
      include_tasks: "../tasks/configure_redirector.yml"
       
    - name: Print deployment summary
      debug:
        msg:
          - "Redirector Deployment Complete!"
          - "-----------------------------"
          - "Redirector IP: {{ ansible_host }}"
          - "Redirector Domain: {{ redirector_subdomain | default('cdn') }}.{{ domain }} (Update DNS A record)"
          - "SSH Key: ~/.ssh/{{ hostvars['localhost']['redirector_name'] }}.pem"
      when: not disable_summary | default(false)